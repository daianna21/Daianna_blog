---
title: "Trimmed Mean of M values"
description: ""
author:
  - name: Daianna Gonzalez-Padilla
date: 2024-12-12
categories:
  - "Normalization"
  - "Trimmed Mean of M values"
  - "Highly-expressed genes"
  - "Differential Gene Expression"
  - "RNA-seq"
  
image: "images/TODO"
bibliography: references.bib
---

⚠️ This page is under development.

# Introduction

# What you'll learn here

# 

```{r plot_raw_expr, fig.height = 5}

library(ComplexHeatmap)
library(circlize)

## 15 samples across 3 conditions 
conditions <- rep(c("A", "B", "C"), c(4, 5, 6))

## Raw counts for 30 genes across the 15 samples
set.seed(12242024)
expr <- matrix(data = sample(c(10:100), replace = T, size = 450), nrow = 30)
colnames(expr) <- conditions
rownames(expr) <- paste("gene", 1:30)

## Introduce 3 highly-expressed genes in condition A only
expr[c("gene 5", "gene 6", "gene 7"), 1:4] <- sample(c(1000:2000), replace = T, size = 12)


## Plot
col_anno <- HeatmapAnnotation(
  Condition = anno_block(gp = gpar(fill = c("orchid1", "palegreen1", "deepskyblue1"), col = "black"), show_name = T), 
  annotation_name_gp =  gpar(fontsize = 9, fontface = "bold"))

Heatmap(expr,
        name = "Raw counts", 
        top_annotation = col_anno, 
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        col = colorRamp2(c(1, 10, 100, 2000), c("linen", "mistyrose2", "rosybrown2", "darkred")),
        column_split = conditions,
        border = TRUE,
        show_row_names = TRUE,
        column_title = "Samples",
        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
        column_names_side = "top",
        column_names_gp = gpar(fontsize = 9, fontface = "bold"),
        row_names_gp = gpar(fontsize = 8),
        row_names_side = "left",
        column_names_rot = 0,
        heatmap_width = unit(12.5, "cm"),
        heatmap_height = unit(12.5, "cm")
)
```

What's clear from the plot of raw counts is that, by design, genes 5, 6, and 7 are more highly-expressed in condition A than B and C. Let's formally assess the differential expression of all genes in A vs B, A vs C, and B vs C, with two sample t-tests (assuming counts are aprox. normal).

```{r t_test_raw_counts, fig.width=6.5, fig.height=4}
library(reshape2)
library(ggplot2)
library(ggrepel)

## Matrices to save gene p-values and t-stats
pvals <- matrix(data = NA, nrow = nrow(expr), ncol = 3)
tstats <- matrix(data = NA, nrow = nrow(expr), ncol = 3)

colnames(pvals) <- colnames(tstats)  <- c("A_vs_B",  "A_vs_C",  "B_vs_C")
rownames(pvals) <- rownames(tstats) <- paste0("gene", 1:30)


## Iterate over genes
for(i in 1:nrow(expr)){
  
  ## t-test for gene expr in condition1 vs condition2
  for(condition_pair in list(c("A", "B"),  c("A", "C"),  c("B", "C"))){
    
    comparison <- paste0(condition_pair[1], "_vs_", condition_pair[2])
    gene <- paste0("gene", i)
    
    gene_expr <- expr[i, colnames(expr) %in% condition_pair]
    formula <- gene_expr ~ Condition
    results <- t.test(formula = formula, 
                      data = data.frame("Condition" = conditions[conditions %in% condition_pair]))
    
    pvals[gene, comparison] <- results$p.value
    tstats[gene, comparison] <- results$statistic

  }
  
}

## Plot t-stats (expression change size)
melted_pvals = melt(pvals)
melted_tstats = melt(tstats)

data = cbind(melted_pvals, melted_tstats$value)
colnames(data) <- c("gene", "comparison", "p", "t")
data$signif <- sapply(data$p, function(p){ if(p<0.05){"*"} else{NA}})

ggplot(data, aes(x = gene, y = t, fill = comparison, color = comparison)) + 
  geom_bar(stat = "identity", position="dodge", colour = "black", width = 0.65, linewidth = 0.3) +
  geom_text(aes(x = gene, y = t + (sign(t)), label = signif, group = comparison, color = comparison), 
            position = position_dodge(0.9), hjust = 0.5,
            show.legend = F) +
  theme_bw() + 
  labs(x = "", y = "Change in expression", fill = "Comparison") + 
  scale_fill_manual(values = c("A_vs_B" = "purple1", "A_vs_C" = "yellow3", "B_vs_C" = "orangered1"), 
                               labels = c("A vs B", "A vs C", "B vs C")) +
  scale_color_manual(values = c("A_vs_B" = "purple1", "A_vs_C" = "yellow3", "B_vs_C" = "orangered1")) +
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1), 
        axis.title.y = element_text(size = 8), 
        axis.text.y = element_text(size = 6), 
        legend.title = element_text(face = "bold", size = 7), 
        legend.text = element_text(size = 6), 
        legend.key.width = unit(0.3, "cm"),
        legend.key.height = unit(0.3, "cm"))



```

```{r}
library(ggplot2)

## Sample library sizes
library_sizes <- data.frame("lib_size" = apply(expr, 2, sum),
                            "sample" = paste("sample", 1:15),
                            "Condition" = conditions)

## Order samples for plotting
library_sizes$sample <- factor(library_sizes$sample, levels = unique(library_sizes$sample))

## Bar plot
ggplot(data = library_sizes, aes(x = sample, y = lib_size, fill = Condition)) + 
  geom_bar(stat = "identity", colour = "black") + 
  geom_text(aes(y = lib_size + 200, label = lib_size), size = 3) +
  theme_bw() + 
  labs(x = "", y = "Total read counts") + 
  scale_fill_manual(values = c("A" = "orchid1", "B" = "palegreen1", "C" = "deepskyblue1")) +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1), 
        legend.title = element_text(face = "bold", size = 10), 
        legend.text = element_text(face = "bold", size = 9))


```

```{r}

## Create pool of reads per gene in each sample
reads_per_gene_per_sample <- apply(expr, 2, function(sample) {rep(rownames(expr), sample)})

## Randomly select 1000 reads per sample
reads_sample <- lapply(reads_per_gene_per_sample, function(sample) {sample(sample, size = 1000, replace = FALSE)})
```
