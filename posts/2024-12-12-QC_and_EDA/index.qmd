---
title: "Exploratory Data Analysis for RNA-seq data"
description: ""
author:
  - name: Daianna Gonzalez-Padilla
date: 2024-12-12
categories:
  - "TODO"
  
image: "images/TODO"
bibliography: references.bib
---

⚠️ This page is under development.

# Introduction

Saying that over 50% of biological data analysis is about exploring and cleaning data is not an exaggeration. In fact, that's the way it's supposed to be. Biological data are inherently noisy. Not only biological differences exist between cells and samples, but all sampling and experimental procedures for data generation, introduce variability, errors, and biases into the data that we have to first spot to then clean or correct.

Exploratory Data Analysis (EDA) is a primordial initial step in which we get to know the overall and specific aspects of the data. This is a process where we create tons of plots to uncover and visualize the data structures, patterns, relationships, and outliers, through which we identify data issues, drive hypoteses, and guide subsequent statistical testing.

EDA is not a pre-established path with ordered steps to follow. What you do, what you plot depends on the particularities of the data you have and the questions you aim to answer; it is completely context dependent. Moreover, many exploratory analyses you perform depend on what previous explorations informed, adding to the global understanding of the data. However, there are basic exploratory steps that establish a foundation to move forward in your analyses.

In transcriptomic data analysis, EDA includes exploring the read count distribution, filtering of lowly-expressed genes and poor-quality samples/cells, determine biological and technical sources of gene expression variation, and detect confounding factors.

In this blog post, you will learn how to perform EDA by exploring an example gene expression data set, aiming to provide a methodological but flexible framework for you to guide your own exploratory analysis.

# What you'll learn here

-   Know the type of exploratory analyses that can be done for RNA-seq data and the rationale behind them.

-   Understand the insights that can be derived from explorations and how they inform posterior analysis decisions.

-   Learn of poweful visualization tools to explore your data.

# An example data set

## Download data

We'll use [*recount3*](https://rna.recount.bio) [@leonardocollado-torres2020; @wilks2021a] package to download real gene expression data from a transcriptomic study, including sample metadata and quality-control (QC) metrics.

The chosen study can be found in the Sequence Read Archive ([SRA](https://www.ncbi.nlm.nih.gov/sra)) under ID `SRP107565`, and it's titled "**Multiomics Profiling Establishes the Polypharmacology of FDA-Approved CDK4/6 Inhibitors and the Potential for Differential Clinical Activity"** ([Marc Hafner et al., 2019](10.1016/j.chembiol.2019.05.005)).

```{r download_data, warning=FALSE, message=FALSE}
library(recount3)

## Download all available projects in human in recount3
human_projects <- available_projects()

## Download gene expression data and metadata from SRP107565 study
proj_info <- subset(
    human_projects,
    project == "SRP107565" & project_type == "data_sources",
    recount3_url = "https://sciserver.org/public-data/recount3/data"
)

proj_info

## Create RangedSummarizedExperiment object to handle RNA-seq and sample data 
rse <- create_rse(proj_info)

## Gene expression data in assay(rse): for first 5 genes and 5 samples
assay(rse)[1:5, 1:5]

## Sample metadata in colData(rse): for first 6 samples and 3 variables
head(colData(rse)[, 1:3])

## Gene data in rowData(rse): for first 6 genes and 3 variables
head(rowData(rse)[, 1:3])

```

## Study design and aims

In this study, the authors performed transcriptomic, proteomic, biochemical, and phenotypic assays to compare the activities of 3 inhibitors of cyclin-dependent kinases 4/6 (CDK4/6): abemaciclib, palbociclib, and ribociclib, which are used to treat hormone receptor-positive breast cancer. For our purposes, only transcriptomic data have been downloaded to be explored.

Specifically, in the transcriptomic experiment, 7 breast cancer human cell lines were drug-treated with [**0.3**]{style="color: #EE7621"}, [**1**]{style="color: #CD3700"} OR [**3**]{style="color: #8B2500"} µM of [**abemaciclib**]{style="color: #0000FF"}, [**palbociclib**]{style="color: #EE3B3B"}, OR [**ribociclib**]{style="color: #CDC673"} (OR untreated = [**control**]{style="color: #A6A6A6"} **=** drug concentration of [**0**]{style="color: #A6A6A6"} µM), and mRNA sequencing was performed after **6** OR [**24**]{style="color: #00CD66"} hrs of exposure. Including replicates, a total of 216 bulk samples were sequenced.

![Ilustration taken from **Figure 1A** in [Marc Hafner et al., 2019](10.1016/j.chembiol.2019.05.005).](images/study_design.png){fig-align="center" width="363"}

Exploring the [*RangedSummarizedExperiment*](https://www.bioconductor.org/packages/devel/bioc/vignettes/SummarizedExperiment/inst/doc/SummarizedExperiment.html) [@martinmorgan2017; @huber2015] object (`rse`) we just created, we can see we have raw expression data for 63,856 genes across 216 samples.

```{r rse_dim}
dim(rse)
```

Processing the sample attributes contained in `sra.sample_attributes`, we can check the number of samples from each cell line, treated with each drug, at each concentration, and time. Let's add individual columns in the sample metadata for these variables.

```{r create_sample_variables, warning=FALSE, message=FALSE}
library(tidyr)

## Sample attributes
head(rse$sra.sample_attributes, 3)

## Divide each string by "|" and extract drug
rse$Drug = sapply(rse$sra.sample_attributes, function(x){strsplit(strsplit(x, "\\|")[[1]][1], ";;")[[1]][2]}) %>% unname

## Num of samples treated with each drug
table(rse$Drug)

## Num of samples of each cell line
rse$Cell_line = sapply(rse$sra.sample_attributes, function(x){strsplit(strsplit(x, "\\|")[[1]][2], ";;")[[1]][2]}) %>% unname

table(rse$Cell_line)

## Num of samples treated with each dose
rse$Concentration =  sapply(rse$sra.sample_attributes, function(x){strsplit(strsplit(x, "\\|")[[1]][3], ";;")[[1]][2]}) %>% unname

table(rse$Concentration)

## Num of samples sequenced after each time
rse$Time =  sapply(rse$sra.sample_attributes, function(x){strsplit(strsplit(x, "\\|")[[1]][5], ";;")[[1]][2]}) %>% unname

table(rse$Time)
```

## Sample variables

In any EDA, we first need to know what the sample variables in the metadata stand for in order to interpret accurately any insights derived from them. A second important consideration is that, even when there are well-established QC metrics used to filter samples, exploring a broader set of them is convenient to find unexpected sample quality differences.

We start by defining the sample-level variables we'll explore in our EDA.

### Main sample attributes

-   `Cell_line`: name of breast cancer cell line.

-   `Drug`: the drug with which a given cell line was treated.

-   `Concentration`: the concentration of the drug administered to the cell line.

-   `Time`: drug exposure time for each cell line.

### Quality-control metrics

QC metrics are measurements of a sample's RNA composition and the mapping of its reads to a reference genome, reflecting the integrity of the cells, and the quality of the mRNA extraction, library preparation, sequencing, and read alignment steps.

The following metrics were collected by *recount3* through a number of tools.

-   Alignment-related metrics obtained through [STAR](https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf) [@dobin2012]:

    -   **`all_mapped_reads`**: total number of aligned reads aligned.

    -   **`uniquely_mapped_reads_%`**: number of reads that mapped to a single locus, of the total input reads.

    -   **`uniquely_mapped_reads_number`**: number of reads that mapped to a single locus.

    -   **`%_of_reads_mapped_to_multiple_loci`**: number of reads that mapped to multiple loci, of the input reads.

    -   **`number_of_reads_mapped_to_multiple_loci`**: number of reads that mapped to multiple loci.

    -   **`%_of_reads_unmapped:_other`**: reads that didn't map due to no acceptable seed/windows, of all input reads.

    -   **`number_of_reads_unmapped:_other`**: number of reads left unmapped due to no acceptable seed/windows.

    -   **`%_of_reads_unmapped:_too_many_mismatches`**: Number of reads where best alignment has more mismatches than max allowed number of mismatches divided by number of input reads

    -   **`number_of_reads_unmapped:_too_many_mismatches`**: Number of reads where best alignment has more mismatches than max allowed number of mismatches

    -   **`%_of_reads_unmapped:_too_short`**: Number of reads where best alignment was shorter than min allowed mapped length divided by number of input reads.

    -   **`number_of_reads_unmapped:_too_short`**: Number of reads where best alignment was shorter than min allowed mapped length.

-   [SAMtools](http://www.htslib.org) [@danecek2021] statistics for chromosome-specific read mapping. Of special interest are the reads mapping to the mitochondrial and sex chromosomes (see explanation in Step X):

    -   **`aligned_reads%.chrm`**: Percent of reads aligning to the mitochondrial genome.

    -   **`aligned_reads%.chrx`**: Percent of reads aligning to chromosome X.

    -   **`aligned_reads%.chry`**: Precent of reads aligning to chromosome Y.

-   Sequencing coverage summaries in gene annotations by [megadepth](https://github.com/ChristopherWilks/megadepth) (`bc`) [@wilks2020] and [*featureCounts*](https://subread.sourceforge.net/featureCounts.html) [@liao2013] (`fc`):

    -   **`bc_auc.all_reads_all_bases`**: Area under coverage (total depth of coverage evaluated at all bases) for all alignments

    -   **`bc_auc.all_reads_annotated_bases`**: Area under coverage for all alignments, but only for bases in annotated exons

    -   **`bc_auc.unique_reads_all_bases`**: Area under coverage for uniquely aligned reads

    -   **`bc_auc.unique_reads_annotated_bases`**: Area under coverage for uniquely aligned reads, but only for bases in annotated exons.

    -   **`exon_fc_count_all.total`**: Total number of fragments, including multi-mappers, input to `featureCounts`

    -   **`exon_fc_count_all.assigned`**: Number of fragments, including multi-mappers, assigned by `featureCounts` to an exon

    -   **`exon_fc_count_unique.total`**: Total number of uniquely mapping fragments input to `featureCounts`

    -   **`exon_fc_count_unique.assigned`**: Number of uniquely mapping fragments assigned by `featureCounts` to an exon.

    -   **`gene_fc_count_all.total`**: Total number of fragments, including multi-mappers, input to `featureCounts`

    -   **`gene_fc_count_all.assigned`**: Number of fragments, including multi-mappers, assigned by `featureCounts` to a gene

    -   **`gene_fc_count_unique.total`**: Total number of uniquely mapping fragments input to `featureCounts`

    -   **`gene_fc_count_unique.assigned`**: Number of uniquely mapping fragments assigned by `featureCounts` to a gene.

For more details on the computation of these metrics please refer to *recount3* [documentation](http://rna.recount.bio/docs/quality-check-fields.html) and the manual of each tool.

# 1. Exploring count data TODO

## 1.1 Read count distribution TODO

A first thing to plot is the frequency of the raw counts across all genes and samples, before any transformation. This gives us an idea of how sparse the data are, i.e., if a large percentage of the counts are zero.

```{r hist_raw_counts}
library("ggplot2")

## Raw counts
data <- data.frame(raw_counts = as.vector(assays(rse)$raw_counts))
plot <- ggplot(data, aes(x = raw_counts)) +
    geom_histogram(colour = "black", fill = "lightgray") +
    labs(x = "Raw counts", y = "Frecuency") +
    theme_classic()
plot + theme(plot.margin = unit(c(2, 4, 2, 4), "cm"))

## Percentage of counts that are zero
length(which(as.vector(assays(rse)$raw_counts) == 0)) / length(as.vector(assays(rse)$raw_counts)) * 100

```

More than 60% of the total counts across all genes and bulk samples are 0. Even though this is a large fraction, it is not surprising as we don't expect most genes to be expressed in every condition; scRNA-seq data is even more sparse. In **step 1.3** we'll deal with lowly-expressed genes ...

## 1.2 Count log-normalization TODO

## 1.3 Filtering lowly-expressed genes TODO

There are multiple approaches to remove zero- and lowly-expressed genes. Here we'll adopt the approach of removing genes with less than X CPM in at least X % samples ...

<https://carpentries-incubator.github.io/rna-seq-data-for-ml/episode5.html>

# 3. Filtering low-quality samples

## 3.1 Explore differences in QC metrics between sample groups

Explore sex differences: sexual chr % can help to confirm the sex of the donors based on alignments to sex chromosomes.

<https://frontlinegenomics.com/how-to-ngs-quality-control/>

<https://www.nature.com/articles/s41592-023-01946-4>

## 3.2 Explore relationships between sample variables

## 3.3 Identify sample outliers (Boxplots and PCA)

# 4. Variable associations with gene expression

Identify technical sources of data variability to then reduce the systematic noise from the data.

## 4.1 Dimensionality reduction

## 4.2 Correlation between variables

## 4.2 Partition of gene expression variance

# Conclusions

Answering these questions we may be able to formulate **hypothesis** that could guide future analysis or experiments.

EDA is extremely illuminating when performed comprehensively and you may find an answer to your data issues or lack of signals by looking back to this step.
